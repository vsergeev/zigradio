const std = @import("std");

const Block = @import("../../radio.zig").Block;
const ProcessResult = @import("../../radio.zig").ProcessResult;

////////////////////////////////////////////////////////////////////////////////
// Frequency Discriminator Block
////////////////////////////////////////////////////////////////////////////////

pub const FrequencyDiscriminatorBlock = struct {
    block: Block,
    gain: f32,
    prev_sample: std.math.Complex(f32) = .{ .re = 0, .im = 0 },

    pub fn init(modulation_index: f32) FrequencyDiscriminatorBlock {
        return .{ .block = Block.init(@This()), .gain = 2 * std.math.pi * modulation_index };
    }

    pub fn initialize(self: *FrequencyDiscriminatorBlock, _: std.mem.Allocator) !void {
        self.prev_sample = .{ .re = 0, .im = 0 };
    }

    pub fn process(self: *FrequencyDiscriminatorBlock, x: []const std.math.Complex(f32), z: []f32) !ProcessResult {
        for (x) |_, i| {
            const tmp = x[i].mul((if (i == 0) self.prev_sample else x[i - 1]).conjugate());
            z[i] = std.math.atan2(f32, tmp.im, tmp.re) * (1.0 / self.gain);
        }

        self.prev_sample = x[x.len - 1];

        return ProcessResult.init(&[1]usize{x.len}, &[1]usize{x.len});
    }
};

////////////////////////////////////////////////////////////////////////////////
// Tests
////////////////////////////////////////////////////////////////////////////////

const BlockTester = @import("radio").testing.BlockTester;

test "FrequencyDiscriminatorBlock" {
    var block = FrequencyDiscriminatorBlock.init(5.0);
    var tester = BlockTester.init(&block.block, 1e-5);
    try tester.check(2, &[1]type{
        std.math.Complex(f32),
    }, .{&[64]std.math.Complex(f32){ .{ .re = -0.73127151, .im = 0.69486749 }, .{ .re = 0.52754927, .im = -0.48986191 }, .{ .re = -0.00912983, .im = -0.10101787 }, .{ .re = 0.30318594, .im = 0.57744670 }, .{ .re = -0.81228077, .im = -0.94330502 }, .{ .re = 0.67153019, .im = -0.13446586 }, .{ .re = 0.52456015, .im = -0.99578792 }, .{ .re = -0.10922561, .im = 0.44308007 }, .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 }, .{ .re = 0.66007137, .im = 0.34061113 }, .{ .re = -0.39326301, .im = 0.17516121 }, .{ .re = 0.76495802, .im = 0.69239485 }, .{ .re = 0.01056764, .im = 0.17800452 }, .{ .re = -0.93094832, .im = -0.51452005 }, .{ .re = 0.59480852, .im = -0.17137200 }, .{ .re = -0.65398520, .im = 0.09759752 }, .{ .re = 0.40608153, .im = 0.34897169 }, .{ .re = -0.25059396, .im = -0.12207674 }, .{ .re = 0.01685298, .im = 0.55688524 }, .{ .re = 0.04187684, .im = -0.21348982 }, .{ .re = -0.02061296, .im = -0.94085008 }, .{ .re = -0.91302544, .im = 0.40676415 }, .{ .re = 0.96637541, .im = 0.18636747 }, .{ .re = -0.21280062, .im = -0.65930158 }, .{ .re = 0.00447712, .im = 0.96415329 }, .{ .re = 0.54104626, .im = 0.07923490 }, .{ .re = 0.72057962, .im = -0.53564775 }, .{ .re = 0.02754333, .im = 0.90493482 }, .{ .re = 0.15558961, .im = -0.08173654 }, .{ .re = -0.46144104, .im = 0.09599262 }, .{ .re = 0.91423255, .im = -0.98858166 }, .{ .re = 0.56731045, .im = 0.64097184 }, .{ .re = 0.77235913, .im = 0.48100683 }, .{ .re = 0.61827981, .im = 0.03735657 }, .{ .re = 0.12271573, .im = -0.14781864 }, .{ .re = -0.88775343, .im = 0.74002033 }, .{ .re = 0.13999867, .im = -0.60032117 }, .{ .re = 0.00944094, .im = -0.03014978 }, .{ .re = -0.28642008, .im = -0.30784416 }, .{ .re = 0.07695759, .im = 0.24697889 }, .{ .re = 0.22490492, .im = -0.08370640 }, .{ .re = -0.94405001, .im = -0.54078996 }, .{ .re = -0.64557749, .im = 0.16892174 }, .{ .re = 0.72201771, .im = 0.59687787 }, .{ .re = 0.59419513, .im = 0.63287473 }, .{ .re = -0.48941192, .im = 0.68348968 }, .{ .re = 0.34622705, .im = -0.83353174 }, .{ .re = -0.96661872, .im = -0.97087997 }, .{ .re = 0.51117355, .im = -0.50088155 } }}, &[1]type{
        f32,
    }, .{&[64]f32{ 0.00000000, -0.09963379, -0.02904759, 0.08747930, 0.09276097, 0.06633818, -0.02827647, 0.09226045, 0.00972204, -0.09489533, -0.07529087, 0.09436131, -0.08305360, 0.00845222, -0.01484630, 0.02298883, -0.02059031, 0.03228263, 0.06845038, -0.04173438, 0.05654833, 0.09314073, -0.08898613, -0.02986473, 0.02078552, 0.07149826, -0.06324558, 0.02469609, 0.06795902, 0.07499939, -0.09578641, -0.07268752, 0.09183247, -0.06539246, -0.09287150, -0.00686276, -0.06264360, -0.08059491, -0.06600220, -0.09020984, -0.04522353, -0.02497618, 0.06937898, -0.06442840, -0.09113169, 0.08028552, 0.05318124, -0.00920832, -0.01580891, -0.02986607, -0.09417382, 0.07941183, 0.00236668, -0.03351247, -0.08576196, -0.05172652, -0.07209980, -0.02470505, -0.06986493, 0.00401423, 0.04377724, 0.09275122, -0.03746149, 0.05025368 }});
}
