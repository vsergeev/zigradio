const std = @import("std");

const Block = @import("../../radio.zig").Block;
const ProcessResult = @import("../../radio.zig").ProcessResult;

const SinglepoleLowpassFilterBlock = @import("./singlepolelowpassfilter.zig").SinglepoleLowpassFilterBlock;

////////////////////////////////////////////////////////////////////////////////
// FM Deemphasis Filter Block
////////////////////////////////////////////////////////////////////////////////

pub const FMDeemphasisFilterBlock = struct {
    pub fn init(tau: f32) SinglepoleLowpassFilterBlock(f32).DerivedBlock {
        return SinglepoleLowpassFilterBlock(f32).init(1 / (2 * std.math.pi * tau));
    }
};

////////////////////////////////////////////////////////////////////////////////
// Tests
////////////////////////////////////////////////////////////////////////////////

const BlockTester = @import("radio").testing.BlockTester;

test "FMDeemphasisFilterBlock" {
    // 5e-6 tau, Float32
    {
        var block = FMDeemphasisFilterBlock.init(5e-6);
        var tester = BlockTester.init(&block.block, 1e-6);
        try tester.check(2, &[1]type{
            f32,
        }, .{&[64]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007, -0.54247558, 0.89054137, 0.80285490, -0.93882000, -0.94910830, 0.08282494, 0.87829834, -0.23759152, -0.56680119, -0.15576684, -0.94191837, -0.55661666, -0.12422481, -0.00837552, -0.53383112, -0.53826690, -0.56243795, -0.08079307, -0.42043677, -0.95702058, 0.67515594, 0.11290865, 0.28458872, -0.62818748, 0.98508680, 0.71989304, -0.75822008, -0.33460963, 0.44296879, 0.42238355, 0.87288117, -0.15578599, 0.66007137, 0.34061113, -0.39326301, 0.17516121, 0.76495802, 0.69239485, 0.01056764, 0.17800452, -0.93094832, -0.51452005, 0.59480852, -0.17137200, -0.65398520, 0.09759752, 0.40608153, 0.34897169 }}, &[1]type{
            f32,
        }, .{&[64]f32{ -0.71842599, 0.65742165, 0.56661868, -0.50968683, 0.00155408, -0.10971232, 0.30447468, 0.57138556, -0.78202057, -0.97020054, 0.66911459, -0.11797695, 0.49707407, -0.94256097, -0.17615595, 0.49795720, -0.57811248, 0.89975381, 0.79550642, -0.90113539, -0.98528826, 0.09960687, 0.84813267, -0.18888389, -0.60801470, -0.12322147, -0.95951080, -0.54641050, -0.14166780, 0.00641965, -0.53887635, -0.53332102, -0.56678551, -0.08505886, -0.41035464, -0.95732284, 0.64677674, 0.15016730, 0.24562331, -0.57455713, 0.90500176, 0.80182290, -0.81130701, -0.29082891, 0.38706720, 0.47668278, 0.81257612, -0.07952999, 0.57216305, 0.43104273, -0.46762630, 0.23692702, 0.69500178, 0.76116800, -0.04381239, 0.22753286, -0.95925671, -0.49452117, 0.55602574, -0.12049298, -0.69459915, 0.12358227, 0.37559083, 0.37939438 }});
    }
}
