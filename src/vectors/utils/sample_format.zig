const std = @import("std");

// @python
// def process_samples_to_bytes(samples, dtype):
//     if dtype.type == numpy.uint8: y = ((samples * 127.5) + 127.5)
//     elif dtype.type == numpy.int8: y = ((samples * 127.5) + 0)
//     elif dtype.type == numpy.uint16: y = ((samples * 32767.5) + 32767.5)
//     elif dtype.type == numpy.int16: y = ((samples * 32767.5) + 0)
//     elif dtype.type == numpy.uint32: y = ((samples * 2147483647.5) + 2147483647.5)
//     elif dtype.type == numpy.int32: y = ((samples * 2147483647.5) + 0)
//     elif dtype.type == numpy.float32: y = samples
//     elif dtype.type == numpy.float64: y = samples
//     else: raise TypeError(f'Unknown dtype {dtype}')
//     return y.astype(dtype).tobytes()
//
// def process_bytes_to_samples(buffer, dtype, out_dtype):
//     if dtype.type == numpy.uint8: y = ((numpy.frombuffer(buffer, dtype) - 127.5) / 127.5)
//     elif dtype.type == numpy.int8: y = ((numpy.frombuffer(buffer, dtype) - 0) / 127.5)
//     elif dtype.type == numpy.uint16: y = ((numpy.frombuffer(buffer, dtype) - 32767.5) / 32767.5)
//     elif dtype.type == numpy.int16: y = ((numpy.frombuffer(buffer, dtype) - 0) / 32767.5)
//     elif dtype.type == numpy.uint32: y = ((numpy.frombuffer(buffer, dtype) - 2147483647.5) / 2147483647.5)
//     elif dtype.type == numpy.int32: y = ((numpy.frombuffer(buffer, dtype) - 0) / 2147483647.5)
//     elif dtype.type == numpy.float32: y = numpy.frombuffer(buffer, dtype)
//     elif dtype.type == numpy.float64: y = numpy.frombuffer(buffer, dtype)
//     else: raise TypeError(f'Unknown dtype {dtype}')
//     return y.astype(numpy.float32).view(out_dtype)
//
// x = random_float32(16)
// vector("input_real_samples", x)
// for (name, dtype) in [('u8', numpy.dtype('u1')), ('s8', numpy.dtype('i1')),
//                       ('u16le', numpy.dtype('<u2')), ('u16be', numpy.dtype('>u2')),
//                       ('s16le', numpy.dtype('<i2')), ('s16be', numpy.dtype('>i2')),
//                       ('u32le', numpy.dtype('<u4')), ('u32be', numpy.dtype('>u4')),
//                       ('s32le', numpy.dtype('<i4')), ('s32be', numpy.dtype('>i4')),
//                       ('f32le', numpy.dtype('<f4')), ('f32be', numpy.dtype('>f4')),
//                       ('f64le', numpy.dtype('<f8')), ('f64be', numpy.dtype('>f8'))]:
//     vector(f"bytes_real_{name}", process_samples_to_bytes(x, dtype))
//     vector(f"samples_real_{name}", process_bytes_to_samples(process_samples_to_bytes(x, dtype), dtype, numpy.float32))
//
// x = random_complex64(16)
// vector("input_complex_samples", x)
// for (name, dtype) in [('u8', numpy.dtype('u1')), ('s8', numpy.dtype('i1')),
//                       ('u16le', numpy.dtype('<u2')), ('u16be', numpy.dtype('>u2')),
//                       ('s16le', numpy.dtype('<i2')), ('s16be', numpy.dtype('>i2')),
//                       ('u32le', numpy.dtype('<u4')), ('u32be', numpy.dtype('>u4')),
//                       ('s32le', numpy.dtype('<i4')), ('s32be', numpy.dtype('>i4')),
//                       ('f32le', numpy.dtype('<f4')), ('f32be', numpy.dtype('>f4')),
//                       ('f64le', numpy.dtype('<f8')), ('f64be', numpy.dtype('>f8'))]:
//     vector(f"bytes_complex_{name}", process_samples_to_bytes(x.view(numpy.float32), dtype))
//     vector(f"samples_complex_{name}", process_bytes_to_samples(process_samples_to_bytes(x.view(numpy.float32), dtype), dtype, numpy.complex64))
// @python

////////////////////////////////////////////////////////////////////////////////
// Auto-generated code below, do not edit!
////////////////////////////////////////////////////////////////////////////////

// @autogenerated

pub const input_real_samples = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const bytes_real_u8 = [16]u8{ 0x22, 0xd8, 0xc2, 0x41, 0x7e, 0x72, 0xa6, 0xc9, 0x17, 0x07, 0xd5, 0x6e, 0xc2, 0x00, 0x71, 0xb7 };
pub const samples_real_u8 = [16]f32{ -0.73333335, 0.69411767, 0.52156866, -0.49019608, -0.01176471, -0.10588235, 0.30196080, 0.57647061, -0.81960785, -0.94509804, 0.67058825, -0.13725491, 0.52156866, -1.00000000, -0.11372549, 0.43529412 };
pub const bytes_real_s8 = [16]u8{ 0xa3, 0x58, 0x43, 0xc2, 0xff, 0xf4, 0x26, 0x49, 0x99, 0x88, 0x55, 0xef, 0x42, 0x82, 0xf3, 0x38 };
pub const samples_real_s8 = [16]f32{ -0.72941178, 0.69019610, 0.52549022, -0.48627451, -0.00784314, -0.09411765, 0.29803923, 0.57254905, -0.80784315, -0.94117647, 0.66666669, -0.13333334, 0.51764709, -0.98823529, -0.10196079, 0.43921569 };
pub const bytes_real_u16le = [32]u8{ 0x65, 0x22, 0xf0, 0xd8, 0x85, 0xc3, 0x4b, 0x41, 0xd4, 0x7e, 0x11, 0x73, 0xce, 0xa6, 0xe8, 0xc9, 0x07, 0x18, 0x41, 0x07, 0xf3, 0xd5, 0xc9, 0x6e, 0x24, 0xc3, 0x8a, 0x00, 0x04, 0x72, 0xb6, 0xb8 };
pub const samples_real_u16le = [16]f32{ -0.73128861, 0.69485009, 0.52751964, -0.48989090, -0.00914015, -0.10102998, 0.30318150, 0.57741666, -0.81228352, -0.94332796, 0.67150378, -0.13447776, 0.52455938, -0.99578851, -0.10923934, 0.44307622 };
pub const bytes_real_u16be = [32]u8{ 0x22, 0x65, 0xd8, 0xf0, 0xc3, 0x85, 0x41, 0x4b, 0x7e, 0xd4, 0x73, 0x11, 0xa6, 0xce, 0xc9, 0xe8, 0x18, 0x07, 0x07, 0x41, 0xd5, 0xf3, 0x6e, 0xc9, 0xc3, 0x24, 0x00, 0x8a, 0x72, 0x04, 0xb8, 0xb6 };
pub const samples_real_u16be = [16]f32{ -0.73128861, 0.69485009, 0.52751964, -0.48989090, -0.00914015, -0.10102998, 0.30318150, 0.57741666, -0.81228352, -0.94332796, 0.67150378, -0.13447776, 0.52455938, -0.99578851, -0.10923934, 0.44307622 };
pub const bytes_real_s16le = [32]u8{ 0x67, 0xa2, 0xf1, 0x58, 0x86, 0x43, 0x4d, 0xc1, 0xd5, 0xfe, 0x12, 0xf3, 0xce, 0x26, 0xe9, 0x49, 0x08, 0x98, 0x43, 0x87, 0xf4, 0x55, 0xca, 0xee, 0x24, 0x43, 0x8b, 0x80, 0x05, 0xf2, 0xb6, 0x38 };
pub const samples_real_s16le = [16]f32{ -0.73124284, 0.69486535, 0.52753490, -0.48984513, -0.00912490, -0.10101473, 0.30316624, 0.57743192, -0.81226826, -0.94328219, 0.67151904, -0.13446251, 0.52454412, -0.99577326, -0.10922408, 0.44306096 };
pub const bytes_real_s16be = [32]u8{ 0xa2, 0x67, 0x58, 0xf1, 0x43, 0x86, 0xc1, 0x4d, 0xfe, 0xd5, 0xf3, 0x12, 0x26, 0xce, 0x49, 0xe9, 0x98, 0x08, 0x87, 0x43, 0x55, 0xf4, 0xee, 0xca, 0x43, 0x24, 0x80, 0x8b, 0xf2, 0x05, 0x38, 0xb6 };
pub const samples_real_s16be = [16]f32{ -0.73124284, 0.69486535, 0.52753490, -0.48984513, -0.00912490, -0.10101473, 0.30316624, 0.57743192, -0.81226826, -0.94328219, 0.67151904, -0.13446251, 0.52454412, -0.99577326, -0.10922408, 0.44306096 };
pub const bytes_real_u32le = [64]u8{ 0x00, 0xb2, 0x65, 0x22, 0x00, 0x6b, 0xf1, 0xd8, 0x00, 0xbc, 0x86, 0xc3, 0x80, 0x34, 0x4c, 0x41, 0x80, 0xd5, 0xd4, 0x7e, 0x80, 0xd8, 0x11, 0x73, 0x00, 0xcc, 0xce, 0xa6, 0x00, 0xc6, 0xe9, 0xc9, 0x00, 0x2f, 0x07, 0x18, 0x00, 0xc8, 0x41, 0x07, 0x00, 0xb4, 0xf4, 0xd5, 0x80, 0xd2, 0xc9, 0x6e, 0x00, 0xca, 0x24, 0xc3, 0x80, 0x05, 0x8a, 0x00, 0x00, 0xe5, 0x04, 0x72, 0x00, 0xd9, 0xb6, 0xb8 };
pub const samples_real_u32le = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912982, -0.10101789, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153025, -0.13446587, 0.52456021, -0.99578792, -0.10922563, 0.44308007 };
pub const bytes_real_u32be = [64]u8{ 0x22, 0x65, 0xb2, 0x00, 0xd8, 0xf1, 0x6b, 0x00, 0xc3, 0x86, 0xbc, 0x00, 0x41, 0x4c, 0x34, 0x80, 0x7e, 0xd4, 0xd5, 0x80, 0x73, 0x11, 0xd8, 0x80, 0xa6, 0xce, 0xcc, 0x00, 0xc9, 0xe9, 0xc6, 0x00, 0x18, 0x07, 0x2f, 0x00, 0x07, 0x41, 0xc8, 0x00, 0xd5, 0xf4, 0xb4, 0x00, 0x6e, 0xc9, 0xd2, 0x80, 0xc3, 0x24, 0xca, 0x00, 0x00, 0x8a, 0x05, 0x80, 0x72, 0x04, 0xe5, 0x00, 0xb8, 0xb6, 0xd9, 0x00 };
pub const samples_real_u32be = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912982, -0.10101789, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153025, -0.13446587, 0.52456021, -0.99578792, -0.10922563, 0.44308007 };
pub const bytes_real_s32le = [64]u8{ 0x00, 0xb2, 0x65, 0xa2, 0x00, 0x6b, 0xf1, 0x58, 0x00, 0xbc, 0x86, 0x43, 0x80, 0x34, 0x4c, 0xc1, 0x70, 0xd5, 0xd4, 0xfe, 0xb0, 0xd8, 0x11, 0xf3, 0x00, 0xcc, 0xce, 0x26, 0x00, 0xc6, 0xe9, 0x49, 0x00, 0x2f, 0x07, 0x98, 0x00, 0xc8, 0x41, 0x87, 0x80, 0xb3, 0xf4, 0x55, 0xa0, 0xd2, 0xc9, 0xee, 0x80, 0xc9, 0x24, 0x43, 0x80, 0x05, 0x8a, 0x80, 0x30, 0xe5, 0x04, 0xf2, 0x00, 0xd9, 0xb6, 0x38 };
pub const samples_real_s32le = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const bytes_real_s32be = [64]u8{ 0xa2, 0x65, 0xb2, 0x00, 0x58, 0xf1, 0x6b, 0x00, 0x43, 0x86, 0xbc, 0x00, 0xc1, 0x4c, 0x34, 0x80, 0xfe, 0xd4, 0xd5, 0x70, 0xf3, 0x11, 0xd8, 0xb0, 0x26, 0xce, 0xcc, 0x00, 0x49, 0xe9, 0xc6, 0x00, 0x98, 0x07, 0x2f, 0x00, 0x87, 0x41, 0xc8, 0x00, 0x55, 0xf4, 0xb3, 0x80, 0xee, 0xc9, 0xd2, 0xa0, 0x43, 0x24, 0xc9, 0x80, 0x80, 0x8a, 0x05, 0x80, 0xf2, 0x04, 0xe5, 0x30, 0x38, 0xb6, 0xd9, 0x00 };
pub const samples_real_s32be = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const bytes_real_f32le = [64]u8{ 0x9c, 0x34, 0x3b, 0xbf, 0xd6, 0xe2, 0x31, 0x3f, 0x78, 0x0d, 0x07, 0x3f, 0x2e, 0xcf, 0xfa, 0xbe, 0x48, 0x95, 0x15, 0xbc, 0x75, 0xe2, 0xce, 0xbd, 0x30, 0x3b, 0x9b, 0x3e, 0x8c, 0xd3, 0x13, 0x3f, 0xa2, 0xf1, 0x4f, 0xbf, 0x70, 0x7c, 0x71, 0xbf, 0x67, 0xe9, 0x2b, 0x3f, 0x6b, 0xb1, 0x09, 0xbe, 0x93, 0x49, 0x06, 0x3f, 0xf5, 0xeb, 0x7e, 0xbf, 0xad, 0xb1, 0xdf, 0xbd, 0x64, 0xdb, 0xe2, 0x3e };
pub const samples_real_f32le = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const bytes_real_f32be = [64]u8{ 0xbf, 0x3b, 0x34, 0x9c, 0x3f, 0x31, 0xe2, 0xd6, 0x3f, 0x07, 0x0d, 0x78, 0xbe, 0xfa, 0xcf, 0x2e, 0xbc, 0x15, 0x95, 0x48, 0xbd, 0xce, 0xe2, 0x75, 0x3e, 0x9b, 0x3b, 0x30, 0x3f, 0x13, 0xd3, 0x8c, 0xbf, 0x4f, 0xf1, 0xa2, 0xbf, 0x71, 0x7c, 0x70, 0x3f, 0x2b, 0xe9, 0x67, 0xbe, 0x09, 0xb1, 0x6b, 0x3f, 0x06, 0x49, 0x93, 0xbf, 0x7e, 0xeb, 0xf5, 0xbd, 0xdf, 0xb1, 0xad, 0x3e, 0xe2, 0xdb, 0x64 };
pub const samples_real_f32be = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const bytes_real_f64le = [128]u8{ 0x00, 0x00, 0x00, 0x80, 0x93, 0x66, 0xe7, 0xbf, 0x00, 0x00, 0x00, 0xc0, 0x5a, 0x3c, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xe1, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0xe5, 0x59, 0xdf, 0xbf, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xb2, 0x82, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0x4e, 0xdc, 0xb9, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x66, 0x67, 0xd3, 0x3f, 0x00, 0x00, 0x00, 0x80, 0x71, 0x7a, 0xe2, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x34, 0xfe, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x2f, 0xee, 0xbf, 0x00, 0x00, 0x00, 0xe0, 0x2c, 0x7d, 0xe5, 0x3f, 0x00, 0x00, 0x00, 0x60, 0x2d, 0x36, 0xc1, 0xbf, 0x00, 0x00, 0x00, 0x60, 0x32, 0xc9, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0xa0, 0x7e, 0xdd, 0xef, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0x35, 0xf6, 0xbb, 0xbf, 0x00, 0x00, 0x00, 0x80, 0x6c, 0x5b, 0xdc, 0x3f };
pub const samples_real_f64le = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const bytes_real_f64be = [128]u8{ 0xbf, 0xe7, 0x66, 0x93, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xe6, 0x3c, 0x5a, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0xe1, 0xaf, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xdf, 0x59, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0xbf, 0x82, 0xb2, 0xa9, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xb9, 0xdc, 0x4e, 0xa0, 0x00, 0x00, 0x00, 0x3f, 0xd3, 0x67, 0x66, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe2, 0x7a, 0x71, 0x80, 0x00, 0x00, 0x00, 0xbf, 0xe9, 0xfe, 0x34, 0x40, 0x00, 0x00, 0x00, 0xbf, 0xee, 0x2f, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe5, 0x7d, 0x2c, 0xe0, 0x00, 0x00, 0x00, 0xbf, 0xc1, 0x36, 0x2d, 0x60, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0xc9, 0x32, 0x60, 0x00, 0x00, 0x00, 0xbf, 0xef, 0xdd, 0x7e, 0xa0, 0x00, 0x00, 0x00, 0xbf, 0xbb, 0xf6, 0x35, 0xa0, 0x00, 0x00, 0x00, 0x3f, 0xdc, 0x5b, 0x6c, 0x80, 0x00, 0x00, 0x00 };
pub const samples_real_f64be = [16]f32{ -0.73127151, 0.69486749, 0.52754927, -0.48986191, -0.00912983, -0.10101787, 0.30318594, 0.57744670, -0.81228077, -0.94330502, 0.67153019, -0.13446586, 0.52456015, -0.99578792, -0.10922561, 0.44308007 };
pub const input_complex_samples = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
pub const bytes_complex_u8 = [32]u8{ 0x3a, 0xf1, 0xe5, 0x07, 0x06, 0x8a, 0xef, 0x61, 0x37, 0x6b, 0x07, 0x38, 0x6f, 0x7e, 0x3b, 0x3a, 0x37, 0x75, 0x49, 0x05, 0xd5, 0x8d, 0xa3, 0x2f, 0xfd, 0xdb, 0x1e, 0x54, 0xb7, 0xb5, 0xee, 0x6b };
pub const samples_complex_u8 = [16]std.math.Complex(f32){ .{ .re = -0.54509807, .im = 0.89019608 }, .{ .re = 0.79607844, .im = -0.94509804 }, .{ .re = -0.95294118, .im = 0.08235294 }, .{ .re = 0.87450981, .im = -0.23921569 }, .{ .re = -0.56862748, .im = -0.16078432 }, .{ .re = -0.94509804, .im = -0.56078434 }, .{ .re = -0.12941177, .im = -0.01176471 }, .{ .re = -0.53725493, .im = -0.54509807 }, .{ .re = -0.56862748, .im = -0.08235294 }, .{ .re = -0.42745098, .im = -0.96078432 }, .{ .re = 0.67058825, .im = 0.10588235 }, .{ .re = 0.27843139, .im = -0.63137257 }, .{ .re = 0.98431373, .im = 0.71764708 }, .{ .re = -0.76470590, .im = -0.34117648 }, .{ .re = 0.43529412, .im = 0.41960785 }, .{ .re = 0.86666667, .im = -0.16078432 } };
pub const bytes_complex_s8 = [32]u8{ 0xbb, 0x71, 0x66, 0x89, 0x87, 0x0a, 0x6f, 0xe2, 0xb8, 0xed, 0x88, 0xba, 0xf1, 0xff, 0xbc, 0xbc, 0xb9, 0xf6, 0xcb, 0x86, 0x56, 0x0e, 0x24, 0xb0, 0x7d, 0x5b, 0xa0, 0xd6, 0x38, 0x35, 0x6f, 0xed };
pub const samples_complex_s8 = [16]std.math.Complex(f32){ .{ .re = -0.54117650, .im = 0.88627452 }, .{ .re = 0.80000001, .im = -0.93333334 }, .{ .re = -0.94901961, .im = 0.07843138 }, .{ .re = 0.87058824, .im = -0.23529412 }, .{ .re = -0.56470591, .im = -0.14901961 }, .{ .re = -0.94117647, .im = -0.54901963 }, .{ .re = -0.11764706, .im = -0.00784314 }, .{ .re = -0.53333336, .im = -0.53333336 }, .{ .re = -0.55686277, .im = -0.07843138 }, .{ .re = -0.41568628, .im = -0.95686275 }, .{ .re = 0.67450982, .im = 0.10980392 }, .{ .re = 0.28235295, .im = -0.62745100 }, .{ .re = 0.98039216, .im = 0.71372551 }, .{ .re = -0.75294119, .im = -0.32941177 }, .{ .re = 0.43921569, .im = 0.41568628 }, .{ .re = 0.87058824, .im = -0.14901961 } };
pub const bytes_complex_u16le = [64]u8{ 0x8f, 0x3a, 0xfc, 0xf1, 0xc3, 0xe6, 0xd4, 0x07, 0x83, 0x06, 0x99, 0x8a, 0x6b, 0xf0, 0x96, 0x61, 0x72, 0x37, 0x0f, 0x6c, 0x6f, 0x07, 0xc0, 0x38, 0x18, 0x70, 0xed, 0x7e, 0xab, 0x3b, 0x19, 0x3b, 0x01, 0x38, 0xa8, 0x75, 0x2e, 0x4a, 0x80, 0x05, 0x6a, 0xd6, 0x73, 0x8e, 0x6c, 0xa4, 0x97, 0x2f, 0x16, 0xfe, 0x24, 0xdc, 0xf2, 0x1e, 0x2b, 0x55, 0xb2, 0xb8, 0x0f, 0xb6, 0xb9, 0xef, 0x0e, 0x6c };
pub const samples_complex_u16le = [16]std.math.Complex(f32){ .{ .re = -0.54250401, .im = 0.89053178 }, .{ .re = 0.80285347, .im = -0.93884182 }, .{ .re = -0.94912642, .im = 0.08281071 }, .{ .re = 0.87829405, .im = -0.23759823 }, .{ .re = -0.56682688, .im = -0.15577936 }, .{ .re = -0.94192415, .im = -0.55663383 }, .{ .re = -0.12425421, .im = -0.00837720 }, .{ .re = -0.53383690, .im = -0.53829253 }, .{ .re = -0.56246281, .im = -0.08079652 }, .{ .re = -0.42046234, .im = -0.95703059 }, .{ .re = 0.67513543, .im = 0.11290150 }, .{ .re = 0.28456551, .im = -0.62819868 }, .{ .re = 0.98507667, .im = 0.71987486 }, .{ .re = -0.75823605, .im = -0.33461508 }, .{ .re = 0.44295415, .im = 0.42235446 }, .{ .re = 0.87286180, .im = -0.15580988 } };
pub const bytes_complex_u16be = [64]u8{ 0x3a, 0x8f, 0xf1, 0xfc, 0xe6, 0xc3, 0x07, 0xd4, 0x06, 0x83, 0x8a, 0x99, 0xf0, 0x6b, 0x61, 0x96, 0x37, 0x72, 0x6c, 0x0f, 0x07, 0x6f, 0x38, 0xc0, 0x70, 0x18, 0x7e, 0xed, 0x3b, 0xab, 0x3b, 0x19, 0x38, 0x01, 0x75, 0xa8, 0x4a, 0x2e, 0x05, 0x80, 0xd6, 0x6a, 0x8e, 0x73, 0xa4, 0x6c, 0x2f, 0x97, 0xfe, 0x16, 0xdc, 0x24, 0x1e, 0xf2, 0x55, 0x2b, 0xb8, 0xb2, 0xb6, 0x0f, 0xef, 0xb9, 0x6c, 0x0e };
pub const samples_complex_u16be = [16]std.math.Complex(f32){ .{ .re = -0.54250401, .im = 0.89053178 }, .{ .re = 0.80285347, .im = -0.93884182 }, .{ .re = -0.94912642, .im = 0.08281071 }, .{ .re = 0.87829405, .im = -0.23759823 }, .{ .re = -0.56682688, .im = -0.15577936 }, .{ .re = -0.94192415, .im = -0.55663383 }, .{ .re = -0.12425421, .im = -0.00837720 }, .{ .re = -0.53383690, .im = -0.53829253 }, .{ .re = -0.56246281, .im = -0.08079652 }, .{ .re = -0.42046234, .im = -0.95703059 }, .{ .re = 0.67513543, .im = 0.11290150 }, .{ .re = 0.28456551, .im = -0.62819868 }, .{ .re = 0.98507667, .im = 0.71987486 }, .{ .re = -0.75823605, .im = -0.33461508 }, .{ .re = 0.44295415, .im = 0.42235446 }, .{ .re = 0.87286180, .im = -0.15580988 } };
pub const bytes_complex_s16le = [64]u8{ 0x91, 0xba, 0xfc, 0x71, 0xc3, 0x66, 0xd6, 0x87, 0x85, 0x86, 0x99, 0x0a, 0x6b, 0x70, 0x97, 0xe1, 0x74, 0xb7, 0x10, 0xec, 0x70, 0x87, 0xc2, 0xb8, 0x1a, 0xf0, 0xee, 0xfe, 0xac, 0xbb, 0x1b, 0xbb, 0x03, 0xb8, 0xa9, 0xf5, 0x30, 0xca, 0x81, 0x85, 0x6b, 0x56, 0x73, 0x0e, 0x6d, 0x24, 0x98, 0xaf, 0x16, 0x7e, 0x25, 0x5c, 0xf4, 0x9e, 0x2c, 0xd5, 0xb2, 0x38, 0x10, 0x36, 0xba, 0x6f, 0x10, 0xec };
pub const samples_complex_s16le = [16]std.math.Complex(f32){ .{ .re = -0.54245824, .im = 0.89051652 }, .{ .re = 0.80283821, .im = -0.93879604 }, .{ .re = -0.94908065, .im = 0.08279546 }, .{ .re = 0.87827879, .im = -0.23758297 }, .{ .re = -0.56678110, .im = -0.15576410 }, .{ .re = -0.94190890, .im = -0.55658805 }, .{ .re = -0.12420844, .im = -0.00836194 }, .{ .re = -0.53382164, .im = -0.53824675 }, .{ .re = -0.56241703, .im = -0.08078126 }, .{ .re = -0.42041656, .im = -0.95701534 }, .{ .re = 0.67515069, .im = 0.11288624 }, .{ .re = 0.28458077, .im = -0.62818342 }, .{ .re = 0.98506141, .im = 0.71989012 }, .{ .re = -0.75819027, .im = -0.33459982 }, .{ .re = 0.44293889, .im = 0.42236972 }, .{ .re = 0.87287706, .im = -0.15576410 } };
pub const bytes_complex_s16be = [64]u8{ 0xba, 0x91, 0x71, 0xfc, 0x66, 0xc3, 0x87, 0xd6, 0x86, 0x85, 0x0a, 0x99, 0x70, 0x6b, 0xe1, 0x97, 0xb7, 0x74, 0xec, 0x10, 0x87, 0x70, 0xb8, 0xc2, 0xf0, 0x1a, 0xfe, 0xee, 0xbb, 0xac, 0xbb, 0x1b, 0xb8, 0x03, 0xf5, 0xa9, 0xca, 0x30, 0x85, 0x81, 0x56, 0x6b, 0x0e, 0x73, 0x24, 0x6d, 0xaf, 0x98, 0x7e, 0x16, 0x5c, 0x25, 0x9e, 0xf4, 0xd5, 0x2c, 0x38, 0xb2, 0x36, 0x10, 0x6f, 0xba, 0xec, 0x10 };
pub const samples_complex_s16be = [16]std.math.Complex(f32){ .{ .re = -0.54245824, .im = 0.89051652 }, .{ .re = 0.80283821, .im = -0.93879604 }, .{ .re = -0.94908065, .im = 0.08279546 }, .{ .re = 0.87827879, .im = -0.23758297 }, .{ .re = -0.56678110, .im = -0.15576410 }, .{ .re = -0.94190890, .im = -0.55658805 }, .{ .re = -0.12420844, .im = -0.00836194 }, .{ .re = -0.53382164, .im = -0.53824675 }, .{ .re = -0.56241703, .im = -0.08078126 }, .{ .re = -0.42041656, .im = -0.95701534 }, .{ .re = 0.67515069, .im = 0.11288624 }, .{ .re = 0.28458077, .im = -0.62818342 }, .{ .re = 0.98506141, .im = 0.71989012 }, .{ .re = -0.75819027, .im = -0.33459982 }, .{ .re = 0.44293889, .im = 0.42236972 }, .{ .re = 0.87287706, .im = -0.15576410 } };
pub const bytes_complex_u32le = [128]u8{ 0x00, 0x29, 0x90, 0x3a, 0x00, 0x42, 0xfd, 0xf1, 0x00, 0xf3, 0xc3, 0xe6, 0x00, 0xbf, 0xd4, 0x07, 0x80, 0x9e, 0x83, 0x06, 0x00, 0x02, 0x9a, 0x8a, 0x00, 0x14, 0x6c, 0xf0, 0x00, 0x9a, 0x96, 0x61, 0x00, 0x0f, 0x73, 0x37, 0x00, 0xd5, 0x0f, 0x6c, 0x00, 0x38, 0x6f, 0x07, 0x00, 0xc9, 0xc0, 0x38, 0x00, 0x67, 0x19, 0x70, 0x00, 0x8d, 0xed, 0x7e, 0x00, 0x6c, 0xab, 0x3b, 0x00, 0x12, 0x1a, 0x3b, 0x80, 0x08, 0x02, 0x38, 0x80, 0x92, 0xa8, 0x75, 0x00, 0x21, 0x2f, 0x4a, 0x80, 0x59, 0x80, 0x05, 0x00, 0x82, 0x6b, 0xd6, 0x00, 0xca, 0x73, 0x8e, 0x00, 0x67, 0x6d, 0xa4, 0x80, 0x8d, 0x97, 0x2f, 0x00, 0x53, 0x17, 0xfe, 0x00, 0x74, 0x25, 0xdc, 0x00, 0xa5, 0xf2, 0x1e, 0x00, 0x83, 0x2b, 0x55, 0x00, 0x34, 0xb3, 0xb8, 0x00, 0xaa, 0x10, 0xb6, 0x00, 0x92, 0xba, 0xef, 0x80, 0x34, 0x0f, 0x6c };
pub const samples_complex_u32le = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054132 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282495 }, .{ .re = 0.87829828, .im = -0.23759151 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422478, .im = -0.00837553 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079308 }, .{ .re = -0.42043674, .im = -0.95702058 }, .{ .re = 0.67515588, .im = 0.11290860 }, .{ .re = 0.28458869, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989298 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296885, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578598 } };
pub const bytes_complex_u32be = [128]u8{ 0x3a, 0x90, 0x29, 0x00, 0xf1, 0xfd, 0x42, 0x00, 0xe6, 0xc3, 0xf3, 0x00, 0x07, 0xd4, 0xbf, 0x00, 0x06, 0x83, 0x9e, 0x80, 0x8a, 0x9a, 0x02, 0x00, 0xf0, 0x6c, 0x14, 0x00, 0x61, 0x96, 0x9a, 0x00, 0x37, 0x73, 0x0f, 0x00, 0x6c, 0x0f, 0xd5, 0x00, 0x07, 0x6f, 0x38, 0x00, 0x38, 0xc0, 0xc9, 0x00, 0x70, 0x19, 0x67, 0x00, 0x7e, 0xed, 0x8d, 0x00, 0x3b, 0xab, 0x6c, 0x00, 0x3b, 0x1a, 0x12, 0x00, 0x38, 0x02, 0x08, 0x80, 0x75, 0xa8, 0x92, 0x80, 0x4a, 0x2f, 0x21, 0x00, 0x05, 0x80, 0x59, 0x80, 0xd6, 0x6b, 0x82, 0x00, 0x8e, 0x73, 0xca, 0x00, 0xa4, 0x6d, 0x67, 0x00, 0x2f, 0x97, 0x8d, 0x80, 0xfe, 0x17, 0x53, 0x00, 0xdc, 0x25, 0x74, 0x00, 0x1e, 0xf2, 0xa5, 0x00, 0x55, 0x2b, 0x83, 0x00, 0xb8, 0xb3, 0x34, 0x00, 0xb6, 0x10, 0xaa, 0x00, 0xef, 0xba, 0x92, 0x00, 0x6c, 0x0f, 0x34, 0x80 };
pub const samples_complex_u32be = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054132 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282495 }, .{ .re = 0.87829828, .im = -0.23759151 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422478, .im = -0.00837553 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079308 }, .{ .re = -0.42043674, .im = -0.95702058 }, .{ .re = 0.67515588, .im = 0.11290860 }, .{ .re = 0.28458869, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989298 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296885, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578598 } };
pub const bytes_complex_s32le = [128]u8{ 0x00, 0x29, 0x90, 0xba, 0x80, 0x42, 0xfd, 0x71, 0x00, 0xf3, 0xc3, 0x66, 0x00, 0xbf, 0xd4, 0x87, 0x80, 0x9e, 0x83, 0x86, 0xf0, 0x01, 0x9a, 0x0a, 0x80, 0x14, 0x6c, 0x70, 0xe0, 0x99, 0x96, 0xe1, 0x00, 0x0f, 0x73, 0xb7, 0x00, 0xd5, 0x0f, 0xec, 0x00, 0x38, 0x6f, 0x87, 0x00, 0xc9, 0xc0, 0xb8, 0xc0, 0x66, 0x19, 0xf0, 0x0c, 0x8d, 0xed, 0xfe, 0x00, 0x6c, 0xab, 0xbb, 0x00, 0x12, 0x1a, 0xbb, 0x80, 0x08, 0x02, 0xb8, 0xa0, 0x92, 0xa8, 0xf5, 0xc0, 0x20, 0x2f, 0xca, 0x80, 0x59, 0x80, 0x85, 0x80, 0x82, 0x6b, 0x56, 0x60, 0xca, 0x73, 0x0e, 0x40, 0x67, 0x6d, 0x24, 0x80, 0x8d, 0x97, 0xaf, 0x00, 0x53, 0x17, 0x7e, 0x80, 0x74, 0x25, 0x5c, 0x00, 0xa5, 0xf2, 0x9e, 0x00, 0x83, 0x2b, 0xd5, 0x80, 0x33, 0xb3, 0x38, 0x00, 0xaa, 0x10, 0x36, 0x00, 0x92, 0xba, 0x6f, 0x60, 0x34, 0x0f, 0xec };
pub const samples_complex_s32le = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
pub const bytes_complex_s32be = [128]u8{ 0xba, 0x90, 0x29, 0x00, 0x71, 0xfd, 0x42, 0x80, 0x66, 0xc3, 0xf3, 0x00, 0x87, 0xd4, 0xbf, 0x00, 0x86, 0x83, 0x9e, 0x80, 0x0a, 0x9a, 0x01, 0xf0, 0x70, 0x6c, 0x14, 0x80, 0xe1, 0x96, 0x99, 0xe0, 0xb7, 0x73, 0x0f, 0x00, 0xec, 0x0f, 0xd5, 0x00, 0x87, 0x6f, 0x38, 0x00, 0xb8, 0xc0, 0xc9, 0x00, 0xf0, 0x19, 0x66, 0xc0, 0xfe, 0xed, 0x8d, 0x0c, 0xbb, 0xab, 0x6c, 0x00, 0xbb, 0x1a, 0x12, 0x00, 0xb8, 0x02, 0x08, 0x80, 0xf5, 0xa8, 0x92, 0xa0, 0xca, 0x2f, 0x20, 0xc0, 0x85, 0x80, 0x59, 0x80, 0x56, 0x6b, 0x82, 0x80, 0x0e, 0x73, 0xca, 0x60, 0x24, 0x6d, 0x67, 0x40, 0xaf, 0x97, 0x8d, 0x80, 0x7e, 0x17, 0x53, 0x00, 0x5c, 0x25, 0x74, 0x80, 0x9e, 0xf2, 0xa5, 0x00, 0xd5, 0x2b, 0x83, 0x00, 0x38, 0xb3, 0x33, 0x80, 0x36, 0x10, 0xaa, 0x00, 0x6f, 0xba, 0x92, 0x00, 0xec, 0x0f, 0x34, 0x60 };
pub const samples_complex_s32be = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
pub const bytes_complex_f32le = [128]u8{ 0xae, 0xdf, 0x0a, 0xbf, 0x85, 0xfa, 0x63, 0x3f, 0xe6, 0x87, 0x4d, 0x3f, 0x82, 0x56, 0x70, 0xbf, 0xc3, 0xf8, 0x72, 0xbf, 0x1f, 0xa0, 0xa9, 0x3d, 0x29, 0xd8, 0x60, 0x3f, 0x31, 0x4b, 0x73, 0xbe, 0xe2, 0x19, 0x11, 0xbf, 0x58, 0x81, 0x1f, 0xbe, 0x90, 0x21, 0x71, 0xbf, 0x6e, 0x7e, 0x0e, 0xbf, 0x94, 0x69, 0xfe, 0xbd, 0x7a, 0x39, 0x09, 0xbc, 0x28, 0xa9, 0x08, 0xbf, 0xdc, 0xcb, 0x09, 0xbf, 0xef, 0xfb, 0x0f, 0xbf, 0xd6, 0x76, 0xa5, 0xbd, 0x7d, 0x43, 0xd7, 0xbe, 0x4d, 0xff, 0x74, 0xbf, 0x05, 0xd7, 0x2c, 0x3f, 0xa6, 0x3c, 0xe7, 0x3d, 0x9d, 0xb5, 0x91, 0x3e, 0xe5, 0xd0, 0x20, 0xbf, 0xa6, 0x2e, 0x7c, 0x3f, 0xe9, 0x4a, 0x38, 0x3f, 0xb6, 0x1a, 0x42, 0xbf, 0xf4, 0x51, 0xab, 0xbe, 0xce, 0xcc, 0xe2, 0x3e, 0xa8, 0x42, 0xd8, 0x3e, 0x24, 0x75, 0x5f, 0x3f, 0x5d, 0x86, 0x1f, 0xbe };
pub const samples_complex_f32le = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
pub const bytes_complex_f32be = [128]u8{ 0xbf, 0x0a, 0xdf, 0xae, 0x3f, 0x63, 0xfa, 0x85, 0x3f, 0x4d, 0x87, 0xe6, 0xbf, 0x70, 0x56, 0x82, 0xbf, 0x72, 0xf8, 0xc3, 0x3d, 0xa9, 0xa0, 0x1f, 0x3f, 0x60, 0xd8, 0x29, 0xbe, 0x73, 0x4b, 0x31, 0xbf, 0x11, 0x19, 0xe2, 0xbe, 0x1f, 0x81, 0x58, 0xbf, 0x71, 0x21, 0x90, 0xbf, 0x0e, 0x7e, 0x6e, 0xbd, 0xfe, 0x69, 0x94, 0xbc, 0x09, 0x39, 0x7a, 0xbf, 0x08, 0xa9, 0x28, 0xbf, 0x09, 0xcb, 0xdc, 0xbf, 0x0f, 0xfb, 0xef, 0xbd, 0xa5, 0x76, 0xd6, 0xbe, 0xd7, 0x43, 0x7d, 0xbf, 0x74, 0xff, 0x4d, 0x3f, 0x2c, 0xd7, 0x05, 0x3d, 0xe7, 0x3c, 0xa6, 0x3e, 0x91, 0xb5, 0x9d, 0xbf, 0x20, 0xd0, 0xe5, 0x3f, 0x7c, 0x2e, 0xa6, 0x3f, 0x38, 0x4a, 0xe9, 0xbf, 0x42, 0x1a, 0xb6, 0xbe, 0xab, 0x51, 0xf4, 0x3e, 0xe2, 0xcc, 0xce, 0x3e, 0xd8, 0x42, 0xa8, 0x3f, 0x5f, 0x75, 0x24, 0xbe, 0x1f, 0x86, 0x5d };
pub const samples_complex_f32be = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
pub const bytes_complex_f64le = [256]u8{ 0x00, 0x00, 0x00, 0xc0, 0xf5, 0x5b, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0x50, 0x7f, 0xec, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0xfc, 0xb0, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x40, 0xd0, 0x0a, 0xee, 0xbf, 0x00, 0x00, 0x00, 0x60, 0x18, 0x5f, 0xee, 0xbf, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x34, 0xb5, 0x3f, 0x00, 0x00, 0x00, 0x20, 0x05, 0x1b, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x20, 0x66, 0x69, 0xce, 0xbf, 0x00, 0x00, 0x00, 0x40, 0x3c, 0x23, 0xe2, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xf0, 0xc3, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x32, 0x24, 0xee, 0xbf, 0x00, 0x00, 0x00, 0xc0, 0xcd, 0xcf, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0x80, 0x32, 0xcd, 0xbf, 0xbf, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x27, 0x81, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x25, 0x15, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0x80, 0x7b, 0x39, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0xe0, 0x7d, 0xff, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0xc0, 0xda, 0xae, 0xb4, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0x6f, 0xe8, 0xda, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0xe9, 0x9f, 0xee, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0xe0, 0x9a, 0xe5, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0x94, 0xe7, 0xbc, 0x3f, 0x00, 0x00, 0x00, 0xa0, 0xb3, 0x36, 0xd2, 0x3f, 0x00, 0x00, 0x00, 0xa0, 0x1c, 0x1a, 0xe4, 0xbf, 0x00, 0x00, 0x00, 0xc0, 0xd4, 0x85, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x20, 0x5d, 0x09, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0x56, 0x43, 0xe8, 0xbf, 0x00, 0x00, 0x00, 0x80, 0x3e, 0x6a, 0xd5, 0xbf, 0x00, 0x00, 0x00, 0xc0, 0x99, 0x59, 0xdc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x55, 0x08, 0xdb, 0x3f, 0x00, 0x00, 0x00, 0x80, 0xa4, 0xee, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0xa0, 0xcb, 0xf0, 0xc3, 0xbf };
pub const samples_complex_f64le = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
pub const bytes_complex_f64be = [256]u8{ 0xbf, 0xe1, 0x5b, 0xf5, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xec, 0x7f, 0x50, 0xa0, 0x00, 0x00, 0x00, 0x3f, 0xe9, 0xb0, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0xbf, 0xee, 0x0a, 0xd0, 0x40, 0x00, 0x00, 0x00, 0xbf, 0xee, 0x5f, 0x18, 0x60, 0x00, 0x00, 0x00, 0x3f, 0xb5, 0x34, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xec, 0x1b, 0x05, 0x20, 0x00, 0x00, 0x00, 0xbf, 0xce, 0x69, 0x66, 0x20, 0x00, 0x00, 0x00, 0xbf, 0xe2, 0x23, 0x3c, 0x40, 0x00, 0x00, 0x00, 0xbf, 0xc3, 0xf0, 0x2b, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xee, 0x24, 0x32, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe1, 0xcf, 0xcd, 0xc0, 0x00, 0x00, 0x00, 0xbf, 0xbf, 0xcd, 0x32, 0x80, 0x00, 0x00, 0x00, 0xbf, 0x81, 0x27, 0x2f, 0x40, 0x00, 0x00, 0x00, 0xbf, 0xe1, 0x15, 0x25, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe1, 0x39, 0x7b, 0x80, 0x00, 0x00, 0x00, 0xbf, 0xe1, 0xff, 0x7d, 0xe0, 0x00, 0x00, 0x00, 0xbf, 0xb4, 0xae, 0xda, 0xc0, 0x00, 0x00, 0x00, 0xbf, 0xda, 0xe8, 0x6f, 0xa0, 0x00, 0x00, 0x00, 0xbf, 0xee, 0x9f, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x3f, 0xe5, 0x9a, 0xe0, 0xa0, 0x00, 0x00, 0x00, 0x3f, 0xbc, 0xe7, 0x94, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xd2, 0x36, 0xb3, 0xa0, 0x00, 0x00, 0x00, 0xbf, 0xe4, 0x1a, 0x1c, 0xa0, 0x00, 0x00, 0x00, 0x3f, 0xef, 0x85, 0xd4, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xe7, 0x09, 0x5d, 0x20, 0x00, 0x00, 0x00, 0xbf, 0xe8, 0x43, 0x56, 0xc0, 0x00, 0x00, 0x00, 0xbf, 0xd5, 0x6a, 0x3e, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xdc, 0x59, 0x99, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xdb, 0x08, 0x55, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xeb, 0xee, 0xa4, 0x80, 0x00, 0x00, 0x00, 0xbf, 0xc3, 0xf0, 0xcb, 0xa0, 0x00, 0x00, 0x00 };
pub const samples_complex_f64be = [16]std.math.Complex(f32){ .{ .re = -0.54247558, .im = 0.89054137 }, .{ .re = 0.80285490, .im = -0.93882000 }, .{ .re = -0.94910830, .im = 0.08282494 }, .{ .re = 0.87829834, .im = -0.23759152 }, .{ .re = -0.56680119, .im = -0.15576684 }, .{ .re = -0.94191837, .im = -0.55661666 }, .{ .re = -0.12422481, .im = -0.00837552 }, .{ .re = -0.53383112, .im = -0.53826690 }, .{ .re = -0.56243795, .im = -0.08079307 }, .{ .re = -0.42043677, .im = -0.95702058 }, .{ .re = 0.67515594, .im = 0.11290865 }, .{ .re = 0.28458872, .im = -0.62818748 }, .{ .re = 0.98508680, .im = 0.71989304 }, .{ .re = -0.75822008, .im = -0.33460963 }, .{ .re = 0.44296879, .im = 0.42238355 }, .{ .re = 0.87288117, .im = -0.15578599 } };
