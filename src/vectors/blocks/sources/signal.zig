const std = @import("std");

// @python
// def process(signal, frequency, rate, amplitude, phase, offset):
//     if signal == "cosine":
//         vec = amplitude * numpy.cos(2 * numpy.pi * (frequency / rate) * numpy.arange(64) + phase) + offset
//     elif signal == "sine":
//         vec = amplitude * numpy.sin(2 * numpy.pi * (frequency / rate) * numpy.arange(64) + phase) + offset
//     elif signal == "constant":
//         vec = numpy.ones(64) * amplitude
//     elif signal in ["square", "triangle", "sawtooth"]:
//         def generate_domain(n, phase_offset=0.0):
//             # Generate the 2*pi modulo domain with addition, as the signal
//             # source block does it, instead of multiplication, which has small
//             # discrepancies compared to addition in the neighborhood of 1e-13
//             # and can cause different slicing on the x axis for square,
//             # triangle, and sawtooth signals.
//             omega, phi, phis = 2 * numpy.pi * (frequency / rate), phase_offset, []
//             for i in range(n):
//                 phis.append(phi)
//                 phi += omega
//                 phi = (phi - 2 * numpy.pi) if phi >= 2 * numpy.pi else phi
//             return numpy.array(phis)
//
//         if signal == "square":
//             def f(phi):
//                 return 1.0 if phi < numpy.pi else -1.0
//         elif signal == "triangle":
//             def f(phi):
//                 if phi < numpy.pi:
//                     return 1 - (2 / numpy.pi) * phi
//                 else:
//                     return -1 + (2 / numpy.pi) * (phi - numpy.pi)
//         elif signal == "sawtooth":
//             def f(phi):
//                 return -1.0 + (1 / numpy.pi) * phi
//
//         vec = amplitude * numpy.vectorize(f)(generate_domain(64, phase)) + offset
//     else:
//         raise NotImplementedError()
//
//     return vec.astype(numpy.float32)
//
// vector("cosine_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0",                  process("cosine", 50, 1000, 1.0, 0, 0))
// vector("cosine_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854",   process("cosine", 100, 1000, 2.5, 0.7853981633974483, -0.50))
// vector("sine_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0",                    process("sine", 50, 1000, 1.0, 0, 0))
// vector("sine_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854",     process("sine", 100, 1000, 2.5, 0.7853981633974483, -0.50))
// vector("square_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0",                  process("square", 50, 1000, 1.0, 0, 0))
// vector("square_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854",   process("square", 100, 1000, 2.5, 0.7853981633974483, -0.50))
// vector("triangle_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0",                process("triangle", 50, 1000, 1.0, 0, 0))
// vector("triangle_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854", process("triangle", 100, 1000, 2.5, 0.7853981633974483, -0.50))
// vector("sawtooth_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0",                process("sawtooth", 50, 1000, 1.0, 0, 0))
// vector("sawtooth_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854", process("sawtooth", 100, 1000, 2.5, 0.7853981633974483, -0.50))
// vector("constant_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0",                process("constant", 50, 1000, 1.0, 0, 0))
// vector("constant_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854", process("constant", 100, 1000, 2.5, 0.7853981633974483, -0.50))
// @python

////////////////////////////////////////////////////////////////////////////////
// Auto-generated code below, do not edit!
////////////////////////////////////////////////////////////////////////////////

// @autogenerated

pub const cosine_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0 = [64]f32{ 1.00000000, 0.95105654, 0.80901700, 0.58778524, 0.30901700, 0.00000000, -0.30901700, -0.58778524, -0.80901700, -0.95105654, -1.00000000, -0.95105654, -0.80901700, -0.58778524, -0.30901700, -0.00000000, 0.30901700, 0.58778524, 0.80901700, 0.95105654, 1.00000000, 0.95105654, 0.80901700, 0.58778524, 0.30901700, 0.00000000, -0.30901700, -0.58778524, -0.80901700, -0.95105654, -1.00000000, -0.95105654, -0.80901700, -0.58778524, -0.30901700, -0.00000000, 0.30901700, 0.58778524, 0.80901700, 0.95105654, 1.00000000, 0.95105654, 0.80901700, 0.58778524, 0.30901700, 0.00000000, -0.30901700, -0.58778524, -0.80901700, -0.95105654, -1.00000000, -0.95105654, -0.80901700, -0.58778524, -0.30901700, -0.00000000, 0.30901700, 0.58778524, 0.80901700, 0.95105654, 1.00000000, 0.95105654, 0.80901700, 0.58778524 };
pub const cosine_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854 = [64]f32{ 1.26776695, -0.10891384, -1.63497627, -2.72751641, -2.96922088, -2.26776695, -0.89108616, 0.63497627, 1.72751629, 1.96922088, 1.26776695, -0.10891384, -1.63497627, -2.72751641, -2.96922088, -2.26776695, -0.89108616, 0.63497627, 1.72751629, 1.96922088, 1.26776695, -0.10891384, -1.63497627, -2.72751641, -2.96922088, -2.26776695, -0.89108616, 0.63497627, 1.72751629, 1.96922088, 1.26776695, -0.10891384, -1.63497627, -2.72751641, -2.96922088, -2.26776695, -0.89108616, 0.63497627, 1.72751629, 1.96922088, 1.26776695, -0.10891384, -1.63497627, -2.72751641, -2.96922088, -2.26776695, -0.89108616, 0.63497627, 1.72751629, 1.96922088, 1.26776695, -0.10891384, -1.63497627, -2.72751641, -2.96922088, -2.26776695, -0.89108616, 0.63497627, 1.72751629, 1.96922088, 1.26776695, -0.10891384, -1.63497627, -2.72751641 };
pub const sine_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0 = [64]f32{ 0.00000000, 0.30901700, 0.58778524, 0.80901700, 0.95105654, 1.00000000, 0.95105654, 0.80901700, 0.58778524, 0.30901700, 0.00000000, -0.30901700, -0.58778524, -0.80901700, -0.95105654, -1.00000000, -0.95105654, -0.80901700, -0.58778524, -0.30901700, -0.00000000, 0.30901700, 0.58778524, 0.80901700, 0.95105654, 1.00000000, 0.95105654, 0.80901700, 0.58778524, 0.30901700, 0.00000000, -0.30901700, -0.58778524, -0.80901700, -0.95105654, -1.00000000, -0.95105654, -0.80901700, -0.58778524, -0.30901700, -0.00000000, 0.30901700, 0.58778524, 0.80901700, 0.95105654, 1.00000000, 0.95105654, 0.80901700, 0.58778524, 0.30901700, 0.00000000, -0.30901700, -0.58778524, -0.80901700, -0.95105654, -1.00000000, -0.95105654, -0.80901700, -0.58778524, -0.30901700, -0.00000000, 0.30901700, 0.58778524, 0.80901700 };
pub const sine_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854 = [64]f32{ 1.26776695, 1.96922088, 1.72751629, 0.63497627, -0.89108616, -2.26776695, -2.96922088, -2.72751641, -1.63497627, -0.10891384, 1.26776695, 1.96922088, 1.72751629, 0.63497627, -0.89108616, -2.26776695, -2.96922088, -2.72751641, -1.63497627, -0.10891384, 1.26776695, 1.96922088, 1.72751629, 0.63497627, -0.89108616, -2.26776695, -2.96922088, -2.72751641, -1.63497627, -0.10891384, 1.26776695, 1.96922088, 1.72751629, 0.63497627, -0.89108616, -2.26776695, -2.96922088, -2.72751641, -1.63497627, -0.10891384, 1.26776695, 1.96922088, 1.72751629, 0.63497627, -0.89108616, -2.26776695, -2.96922088, -2.72751641, -1.63497627, -0.10891384, 1.26776695, 1.96922088, 1.72751629, 0.63497627, -0.89108616, -2.26776695, -2.96922088, -2.72751641, -1.63497627, -0.10891384, 1.26776695, 1.96922088, 1.72751629, 0.63497627 };
pub const square_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0 = [64]f32{};
pub const square_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854 = [64]f32{};
pub const triangle_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0 = [64]f32{ 1.00000000, 0.80000001, 0.60000002, 0.40000001, 0.20000000, 0.00000000, -0.20000000, -0.40000001, -0.60000002, -0.80000001, -1.00000000, -0.80000001, -0.60000002, -0.40000001, -0.20000000, 0.00000000, 0.20000000, 0.40000001, 0.60000002, 0.80000001, 1.00000000, 0.80000001, 0.60000002, 0.40000001, 0.20000000, 0.00000000, -0.20000000, -0.40000001, -0.60000002, -0.80000001, -1.00000000, -0.80000001, -0.60000002, -0.40000001, -0.20000000, 0.00000000, 0.20000000, 0.40000001, 0.60000002, 0.80000001, 1.00000000, 0.80000001, 0.60000002, 0.40000001, 0.20000000, 0.00000000, -0.20000000, -0.40000001, -0.60000002, -0.80000001, -1.00000000, -0.80000001, -0.60000002, -0.40000001, -0.20000000, 0.00000000, 0.20000000, 0.40000001, 0.60000002, 0.80000001, 1.00000000, 0.80000001, 0.60000002, 0.40000001 };
pub const triangle_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854 = [64]f32{ 0.75000000, -0.25000000, -1.25000000, -2.25000000, -2.75000000, -1.75000000, -0.75000000, 0.25000000, 1.25000000, 1.75000000, 0.75000000, -0.25000000, -1.25000000, -2.25000000, -2.75000000, -1.75000000, -0.75000000, 0.25000000, 1.25000000, 1.75000000, 0.75000000, -0.25000000, -1.25000000, -2.25000000, -2.75000000, -1.75000000, -0.75000000, 0.25000000, 1.25000000, 1.75000000, 0.75000000, -0.25000000, -1.25000000, -2.25000000, -2.75000000, -1.75000000, -0.75000000, 0.25000000, 1.25000000, 1.75000000, 0.75000000, -0.25000000, -1.25000000, -2.25000000, -2.75000000, -1.75000000, -0.75000000, 0.25000000, 1.25000000, 1.75000000, 0.75000000, -0.25000000, -1.25000000, -2.25000000, -2.75000000, -1.75000000, -0.75000000, 0.25000000, 1.25000000, 1.75000000, 0.75000000, -0.25000000, -1.25000000, -2.25000000 };
pub const sawtooth_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0 = [64]f32{ -1.00000000, -0.89999998, -0.80000001, -0.69999999, -0.60000002, -0.50000000, -0.40000001, -0.30000001, -0.20000000, -0.10000000, 0.00000000, 0.10000000, 0.20000000, 0.30000001, 0.40000001, 0.50000000, 0.60000002, 0.69999999, 0.80000001, 0.89999998, -1.00000000, -0.89999998, -0.80000001, -0.69999999, -0.60000002, -0.50000000, -0.40000001, -0.30000001, -0.20000000, -0.10000000, 0.00000000, 0.10000000, 0.20000000, 0.30000001, 0.40000001, 0.50000000, 0.60000002, 0.69999999, 0.80000001, 0.89999998, -1.00000000, -0.89999998, -0.80000001, -0.69999999, -0.60000002, -0.50000000, -0.40000001, -0.30000001, -0.20000000, -0.10000000, 0.00000000, 0.10000000, 0.20000000, 0.30000001, 0.40000001, 0.50000000, 0.60000002, 0.69999999, 0.80000001, 0.89999998, -1.00000000, -0.89999998, -0.80000001, -0.69999999 };
pub const sawtooth_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854 = [64]f32{ -2.37500000, -1.87500000, -1.37500000, -0.87500000, -0.37500000, 0.12500000, 0.62500000, 1.12500000, 1.62500000, -2.87500000, -2.37500000, -1.87500000, -1.37500000, -0.87500000, -0.37500000, 0.12500000, 0.62500000, 1.12500000, 1.62500000, -2.87500000, -2.37500000, -1.87500000, -1.37500000, -0.87500000, -0.37500000, 0.12500000, 0.62500000, 1.12500000, 1.62500000, -2.87500000, -2.37500000, -1.87500000, -1.37500000, -0.87500000, -0.37500000, 0.12500000, 0.62500000, 1.12500000, 1.62500000, -2.87500000, -2.37500000, -1.87500000, -1.37500000, -0.87500000, -0.37500000, 0.12500000, 0.62500000, 1.12500000, 1.62500000, -2.87500000, -2.37500000, -1.87500000, -1.37500000, -0.87500000, -0.37500000, 0.12500000, 0.62500000, 1.12500000, 1.62500000, -2.87500000, -2.37500000, -1.87500000, -1.37500000, -0.87500000 };
pub const constant_frequency_50_rate_1000_ampltiude_1_offset_0_phase_0 = [64]f32{};
pub const constant_frequency_100_rate_1000_ampltiude_2_5_offset_neg_0_50_phase_0_7854 = [64]f32{};
